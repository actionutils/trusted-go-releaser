name: Trusted Go Release Workflow

# This workflow creates a secure release for GitHub repositories
# It's designed as a reusable workflow that can be called from other workflows
# It enforces releases only through labeled PRs (bump:patch, bump:minor, bump:major)
on:
  workflow_call:
    inputs:
      branch:
        description: 'The working branch'
        required: false
        default: ${{ github.event.repository.default_branch }}
        type: string
      draft:
        description: 'Whether to keep the release as a draft'
        required: false
        type: boolean
        default: false
    secrets:
      github-token:
        description: 'GitHub token with appropriate permissions'
        required: true
    outputs:
      tag_name:
        description: 'The tag name created or used for this release'
        value: ${{ jobs.version.outputs.tag_name }}
      version:
        description: 'The version number without "v" prefix'
        value: ${{ jobs.version.outputs.version }}
      release_url:
        description: 'URL of the created GitHub release'
        value: ${{ jobs.release.outputs.release_url }}

jobs:
  # Version management and tag creation job
  version:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Enable OIDC
      contents: write # Tag updates
      pull-requests: write # Post comment
    outputs:
      tag_name: ${{ steps.tag.outputs.value }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      # Set up signed tag configuration
      - uses: chainguard-dev/actions/setup-gitsign@v1.0.1

      # Bump version based on PR labels (bump:major,bump:minor,bump:patch)
      - id: bumpr
        uses: haya14busa/action-bumpr@v1.11.4

      # Get tag name from bumpr output only
      - id: tag
        run: |
          if [[ "${{ steps.bumpr.outputs.skip }}" == "true" ]]; then
            echo "value=" >> $GITHUB_OUTPUT
            echo "No version bump label found, skipping release."
          else
            TAG="${{ steps.bumpr.outputs.next_version }}"
            echo "value=${TAG}" >> $GITHUB_OUTPUT
            echo "Next version: ${TAG}"
          fi

      # Extract version number without "v" prefix (v1.2.3 â†’ 1.2.3)
      - id: extract-version
        if: steps.tag.outputs.value != ''
        run: |
          TAG=${{ steps.tag.outputs.value }}
          VERSION=${TAG#refs/tags/v}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

  goreleaser:
    needs: [version]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write # needed to write releases
      id-token: write # needed for keyless signing
      attestations: write # needed for provenance
    outputs:
      artifacts: ${{ steps.goreleaser.outputs.artifacts }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0 # this is important, otherwise it won't checkout the full tree (i.e. no previous tags)
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - uses: sigstore/cosign-installer@v3.8.1 # installs cosign
      - uses: anchore/sbom-action/download-syft@v0.18.0 # installs syft
      - uses: goreleaser/goreleaser-action@v6 # run goreleaser
        id: goreleaser
        with:
          version: '~> v2'
          args: release --clean --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/attest-build-provenance@v2
        with:
          subject-checksums: ./dist/checksums.txt
      # Generate attestations for checksum.txt file itself.
      - uses: actions/attest-build-provenance@v2
        with:
          subject-path: ./dist/checksums.txt

  release:
    needs: [version, goreleaser]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for release creation
    outputs:
      release_url: ${{ steps.update_release.outputs.release_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.tag_name }}

      - name: Update GitHub Release
        id: update_release
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          TAG_NAME="${{ needs.version.outputs.tag_name }}"

          # Update release
          RELEASE_URL=$(gh release edit "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --draft=${{ inputs.draft }})

          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "Release URL: $RELEASE_URL"

  # https://goreleaser.com/install/#verifying-the-artifacts
  verification-with-cosign:
    needs: [version, release, goreleaser]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Download assets
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ needs.version.outputs.tag_name }}
        run: |
          gh -R "$GITHUB_REPOSITORY" release download "$TAG_NAME"

      - name: Get checksum file name
        id: checksumtxt
        env:
          ARTIFACTS: ${{ needs.goreleaser.outputs.artifacts }}
        run: |
          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .name')
          echo "checksum file: ${checksum_file}"
          echo "checksum_file=${checksum_file}" >> $GITHUB_OUTPUT

      - name: Verify checksum signature
        env:
          checksum_file: ${{ steps.checksumtxt.outputs.checksum_file }}
        run: |
          cosign verify-blob \
            --certificate-identity-regexp '^https://github.com/' \
            --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' \
            --cert "${checksum_file}.pem" \
            --signature "${checksum_file}.sig" \
            "${checksum_file}"

      - name: Verify checksum
        env:
          checksum_file: ${{ steps.checksumtxt.outputs.checksum_file }}
        run: |
          sha256sum --ignore-missing -c "${checksum_file}"
